[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "miso-ultimate"
version = "15.32.28"
description = "Meta-Intelligent Synthetic Operator - Advanced AI System"
authors = [
    {name = "MimitechAI", email = "dev@mimitech.ai"}
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["ai", "machine-learning", "benchmarking", "quantum", "neural-networks"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core dependencies - pinned for reproducibility
dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic==2.5.0",
    "numpy==1.24.4", 
    "scipy==1.11.4",
    "pandas==2.0.3",
    "torch>=2.2.0",
    "psutil==5.9.6",
    "websockets==12.0",
    "httpx>=0.25.0",
    "slowapi>=0.1.9",  # Rate limiting
    "python-json-logger>=2.0.7",  # Structured logging
    "python-dotenv>=1.0.0",  # Environment management
]

[project.optional-dependencies]
# Backend services
backend = [
    "sqlalchemy>=2.0",
    "alembic>=1.10",
    "redis>=5.0.0",
    "celery>=5.3.0",
]

# Dashboard & visualization
dashboard = [
    "dash==2.16.1", 
    "plotly==5.22.0",
    "dash-bootstrap-components==1.6.0",
    "streamlit>=1.32.0",
]

# Training & ML
training = [
    "wandb>=0.17.0",
    "mlflow>=2.12.0", 
    "tensorboard>=2.15.0",
    "scikit-learn>=1.4.0",
]

# Vision & image processing  
vision = [
    "opencv-python-headless==4.9.0.80",
    "torchvision>=0.17.0",
    "pillow>=10.2.0",
]

# Quantum computing
quantum = [
    "pennylane>=0.36.0",
    "qiskit>=1.0.0",
    "cirq>=1.3.0",
]

# Apple Silicon optimization
apple = [
    "mlx>=0.12.0",
    "mlx-lm>=0.10.0",
]

# Security & compliance
security = [
    "bandit>=1.7.5",
    "safety>=3.0.0",
    "cryptography>=42.0.0",
]

# Development tools
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    "ruff>=0.3.0",
    "pre-commit>=3.6.0",
]

# Benchmarking suite
benchmarks = [
    "datasets>=2.18.0",
    "evaluate>=0.4.0",
    "transformers>=4.38.0",
    "tokenizers>=0.15.0",
]

# All extras combined
all = [
    "miso-ultimate[backend,dashboard,training,vision,quantum,apple,security,dev,benchmarks]"
]

[project.urls]
Homepage = "https://github.com/mimitech-ai/miso-ultimate"
Documentation = "https://docs.mimitech.ai/miso"
Repository = "https://github.com/mimitech-ai/miso-ultimate.git"
Issues = "https://github.com/mimitech-ai/miso-ultimate/issues"

[project.scripts]
miso = "miso.cli:main"
miso-bench = "miso.benchmarks.cli:main"
miso-dashboard = "miso.dashboard.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["miso", "vxor", "tests"]

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg  
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["miso", "vxor"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=miso --cov=vxor --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["miso", "vxor"]
omit = [
    "*/tests/*",
    "*/venv/*", 
    "*/.venv/*",
    "*/migrations/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
